name: Deploy Nginx to AWS

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
  KEY_PAIR_NAME: github-workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Verify AWS CLI installation
        run: aws --version

    #   - name: Create Security Group
    #     run: |
    #       # Create Security Group
    #       SECURITY_GROUP_ID=$(aws ec2 create-security-group \
    #         --group-name MySecurityGroup \
    #         --description "Security group created by GitHub Actions" \
    #         --query 'GroupId' \
    #         --output text)
          
    #       echo "Created Security Group with ID: $SECURITY_GROUP_ID"
          
    #       # Add Inbound Rule for SSH (port 22)
    #       aws ec2 authorize-security-group-ingress \
    #         --group-id $SECURITY_GROUP_ID \
    #         --protocol tcp \
    #         --port 22 \
    #         --cidr 0.0.0.0/0  # Open for SSH to any IP, adjust if needed

    #     
    #       aws ec2 authorize-security-group-ingress \
    #         --group-id $SECURITY_GROUP_ID \
    #         --protocol tcp \
    #         --port 80 \
    #         --cidr 0.0.0.0/0  # Open for HTTP to any IP

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - name: Launch EC2 Instance
        id: create_ec2
        env:
          INSTANCE_TYPE: t2.micro
          AMI_ID: ami-0e2c8caa4b6378d8c
          SECURITY_GROUP: MySecurityGroup
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --count 1 \
            --instance-type $INSTANCE_TYPE \
            --key-name $KEY_PAIR_NAME \
            --security-groups $SECURITY_GROUP \
            --region $AWS_REGION \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region $AWS_REGION
    

      - name: Get EC2 Public IP
        id: get_public_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --region $AWS_REGION \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV


      - name: Wait for EC2 instance to be ready
        run: |
          HOST=$PUBLIC_IP
          PORT=22
          TIMEOUT=1000  # Tiempo máximo de espera en segundos
          START=$(date +%s)
            
          echo "Esperando que la instancia esté lista para SSH..."
    
          while true; do
              nc -z -w5 $HOST $PORT 2>/dev/null  # Verifica si el puerto 22 está abierto
              if [ $? -eq 0 ]; then
                  echo "Conexión SSH disponible en $HOST:$PORT"
                  break  # Sale del ciclo cuando la conexión es exitosa
              fi
    
              NOW=$(date +%s)
              ELAPSED=$((NOW - START))
              if [ $ELAPSED -ge $TIMEOUT ]; then
                  echo "Tiempo de espera agotado. La instancia no está lista."
                  exit 1  # Sale del flujo de trabajo si se alcanzó el tiempo de espera
              fi
    
              echo "Esperando... ($ELAPSED segundos)"
              sleep 5  # Espera de 5 segundos entre intentos
          done
    
      - name: Copy docker-compose.yml to EC2
        run: |
          echo "Copiando docker-compose.yml a la instancia EC2..."
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.yml ubuntu@$PUBLIC_IP:/home/ubuntu/docker-compose.yml
          echo "docker-compose.yml copiado exitosamente."
    
      - name: SSH into EC2 and run docker-compose
        run: |
          echo "Conectando a la instancia EC2..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP 'docker-compose -f /home/ubuntu/docker-compose.yml up -d'
          echo "docker-compose ejecutado en la instancia EC2."



            
